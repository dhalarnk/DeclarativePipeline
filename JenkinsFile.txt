pipeline {

  agent any

  tools {
    maven "Maven3.6.3"
    jdk "jdk"

  }
  stages {

    stage('StaticCodeAnalysis') {

      environment {
        scannerhome = tool 'sonarqube'
      }

      steps {

        git 'https://github.com/dhalarnk/DevOps-Demo-WebApp.git'

        withSonarQubeEnv('sonarqube') {
          sh "${scannerHome}/bin/sonar-scanner -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.projectKey=WEBPOC:AVNCommunication -Dsonar.sources=. -Dsonar.tests=. -Dsonar.inclusions=**/test/java/servlet/createpage_junit.java -Dsonar.test.exclusions=**/test/java/servlet/createpage_junit.java -Dsonar.login=admin -Dsonar.password=sonar"
        }
      }

    }

    stage('BuildWebApp') {
      steps {

        git 'https://github.com/dhalarnk/DevOps-Demo-WebApp.git'

        sh "mvn compile"

      }
    }
    stage('DeployToTest') {
      steps {

        git 'https://github.com/dhalarnk/DevOps-Demo-WebApp.git'

        sh "mvn package"

        deploy adapters: [tomcat8(credentialsId: 'tomcat', path: '', url: 'http://172.31.37.215:8080/')],
          contextPath: '/QAWebapp',
          war: '**/*.war'

      }
    }

    stage('StoreArtifacts') {

      steps {

        git 'https://github.com/dhalarnk/DevOps-Demo-WebApp.git'

        script {

          def server = Artifactory.server 'Artifactory'
          def rtMaven = Artifactory.newMavenBuild()
          def buildInfo

          rtMaven.tool = 'Maven3.6.3'

          rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server

          rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server

          buildInfo = Artifactory.newBuildInfo()

          buildInfo.env.capture = true

          rtMaven.run pom: 'pom.xml', goals: 'package', buildInfo: buildInfo

          server.publishBuildInfo buildInfo

        }
      }

    }

  }
}
